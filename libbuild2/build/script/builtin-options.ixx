// -*- C++ -*-
//
// This file was generated by CLI, a command line interface
// compiler for C++.
//

// Begin prologue.
//
//
// End prologue.

#include <cassert>

namespace build2
{
  namespace build
  {
    namespace script
    {
      namespace cli
      {
        // unknown_mode
        //
        inline unknown_mode::
        unknown_mode (value v)
        : v_ (v)
        {
        }

        // exception
        //
        inline ::std::ostream&
        operator<< (::std::ostream& os, const exception& e)
        {
          e.print (os);
          return os;
        }

        // unknown_option
        //
        inline unknown_option::
        unknown_option (const std::string& option)
        : option_ (option)
        {
        }

        inline const std::string& unknown_option::
        option () const
        {
          return option_;
        }

        // unknown_argument
        //
        inline unknown_argument::
        unknown_argument (const std::string& argument)
        : argument_ (argument)
        {
        }

        inline const std::string& unknown_argument::
        argument () const
        {
          return argument_;
        }

        // missing_value
        //
        inline missing_value::
        missing_value (const std::string& option)
        : option_ (option)
        {
        }

        inline const std::string& missing_value::
        option () const
        {
          return option_;
        }

        // invalid_value
        //
        inline invalid_value::
        invalid_value (const std::string& option,
                       const std::string& value,
                       const std::string& message)
        : option_ (option),
          value_ (value),
          message_ (message)
        {
        }

        inline const std::string& invalid_value::
        option () const
        {
          return option_;
        }

        inline const std::string& invalid_value::
        value () const
        {
          return value_;
        }

        inline const std::string& invalid_value::
        message () const
        {
          return message_;
        }

        // argv_scanner
        //
        inline argv_scanner::
        argv_scanner (int& argc,
                      char** argv,
                      bool erase,
                      std::size_t sp)
        : start_position_ (sp + 1),
          i_ (1),
          argc_ (argc),
          argv_ (argv),
          erase_ (erase)
        {
        }

        inline argv_scanner::
        argv_scanner (int start,
                      int& argc,
                      char** argv,
                      bool erase,
                      std::size_t sp)
        : start_position_ (sp + static_cast<std::size_t> (start)),
          i_ (start),
          argc_ (argc),
          argv_ (argv),
          erase_ (erase)
        {
        }

        inline int argv_scanner::
        end () const
        {
          return i_;
        }

        // vector_scanner
        //
        inline vector_scanner::
        vector_scanner (const std::vector<std::string>& v,
                        std::size_t i,
                        std::size_t sp)
        : start_position_ (sp), v_ (v), i_ (i)
        {
        }

        inline std::size_t vector_scanner::
        end () const
        {
          return i_;
        }

        inline void vector_scanner::
        reset (std::size_t i, std::size_t sp)
        {
          i_ = i;
          start_position_ = sp;
        }
      }
    }
  }
}

namespace build2
{
  namespace build
  {
    namespace script
    {
      // depdb_dep_options
      //

      inline const path& depdb_dep_options::
      file () const
      {
        return this->file_;
      }

      inline path& depdb_dep_options::
      file ()
      {
        return this->file_;
      }

      inline void depdb_dep_options::
      file (const path& x)
      {
        this->file_ = x;
      }

      inline bool depdb_dep_options::
      file_specified () const
      {
        return this->file_specified_;
      }

      inline void depdb_dep_options::
      file_specified (bool x)
      {
        this->file_specified_ = x;
      }

      inline const string& depdb_dep_options::
      format () const
      {
        return this->format_;
      }

      inline string& depdb_dep_options::
      format ()
      {
        return this->format_;
      }

      inline void depdb_dep_options::
      format (const string& x)
      {
        this->format_ = x;
      }

      inline bool depdb_dep_options::
      format_specified () const
      {
        return this->format_specified_;
      }

      inline void depdb_dep_options::
      format_specified (bool x)
      {
        this->format_specified_ = x;
      }

      inline const string& depdb_dep_options::
      what () const
      {
        return this->what_;
      }

      inline string& depdb_dep_options::
      what ()
      {
        return this->what_;
      }

      inline void depdb_dep_options::
      what (const string& x)
      {
        this->what_ = x;
      }

      inline bool depdb_dep_options::
      what_specified () const
      {
        return this->what_specified_;
      }

      inline void depdb_dep_options::
      what_specified (bool x)
      {
        this->what_specified_ = x;
      }

      inline const dir_paths& depdb_dep_options::
      include_path () const
      {
        return this->include_path_;
      }

      inline dir_paths& depdb_dep_options::
      include_path ()
      {
        return this->include_path_;
      }

      inline void depdb_dep_options::
      include_path (const dir_paths& x)
      {
        this->include_path_ = x;
      }

      inline bool depdb_dep_options::
      include_path_specified () const
      {
        return this->include_path_specified_;
      }

      inline void depdb_dep_options::
      include_path_specified (bool x)
      {
        this->include_path_specified_ = x;
      }

      inline const string& depdb_dep_options::
      default_prereq_type () const
      {
        return this->default_prereq_type_;
      }

      inline string& depdb_dep_options::
      default_prereq_type ()
      {
        return this->default_prereq_type_;
      }

      inline void depdb_dep_options::
      default_prereq_type (const string& x)
      {
        this->default_prereq_type_ = x;
      }

      inline bool depdb_dep_options::
      default_prereq_type_specified () const
      {
        return this->default_prereq_type_specified_;
      }

      inline void depdb_dep_options::
      default_prereq_type_specified (bool x)
      {
        this->default_prereq_type_specified_ = x;
      }
    }
  }
}

// Begin epilogue.
//
//
// End epilogue.
