# file      : libbuild2/cxx/buildfile
# license   : MIT; see accompanying LICENSE file

# NOTE: shared imports should go into root.build.
#
include ../
impl_libs = ../lib{build2} # Implied interface dependency.

include ../cc/
intf_libs = ../cc/lib{build2-cc}

./: lib{build2-cxx}: libul{build2-cxx}: {hxx ixx txx cxx}{** -**.test...} \
  $intf_libs $impl_libs

# Unit tests.
#
exe{*.test}:
{
  test = true
  install = false
}

for t: cxx{**.test...}
{
  d = $directory($t)
  n = $name($t)...

  ./: $d/exe{$n}: $t $d/{hxx ixx txx}{+$n} $d/testscript{+$n}
  $d/exe{$n}: libul{build2-cxx}: bin.whole = false
}

# Build options.
#
obja{*}: cxx.poptions += -DLIBBUILD2_CXX_STATIC_BUILD
objs{*}: cxx.poptions += -DLIBBUILD2_CXX_SHARED_BUILD

# Note that we used to compare complete target triplets but that proved too
# strict (see libbuild2/buildfile for details).
#
cross = ($cxx.target.cpu != $build.host.cpu || \
         $cxx.target.system != $build.host.system)

# Pass native/default C++ compiler paths (not forgetting to escape backslashes
# on Windows).
#
if! $cross
  {obja objs}{init}: cxx.poptions += \
    -DBUILD2_NATIVE_CXX=\"$regex.replace($recall($cxx.path), '\\', '\\\\')\"

if $defined(config.build2.default_cxx)
  {obja objs}{init}: cxx.poptions += \
    -DBUILD2_DEFAULT_CXX=\"$regex.replace(\
      $quote($config.build2.default_cxx), '\\', '\\\\')\"

# Export options.
#
lib{build2-cxx}:
{
  cxx.export.poptions = "-I$out_root" "-I$src_root"
  cxx.export.libs = $intf_libs
}

liba{build2-cxx}: cxx.export.poptions += -DLIBBUILD2_CXX_STATIC
libs{build2-cxx}: cxx.export.poptions += -DLIBBUILD2_CXX_SHARED

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
#
# And because this is a build system module, we also embed the same value as
# the interface version (note that we cannot use build.version.interface for
# bundled modules because we could be built with a different version of the
# build system).
#
ver = ($version.pre_release    \
       ? "$version.project_id" \
       : "$version.major.$version.minor")

lib{build2-cxx}: bin.lib.version = @"-$ver"
libs{build2-cxx}: bin.lib.load_suffix = "-$ver"

# Install into the libbuild2/cxx/ subdirectory of, say, /usr/include/
# recreating subdirectories.
#
{hxx ixx txx}{*}:
{
  install         = include/libbuild2/cxx/
  install.subdirs = true
}
